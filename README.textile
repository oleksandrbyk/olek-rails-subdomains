h1. !http://railsapps.github.com/images/rails-36x36.jpg(Rails Application for Subdomains with Devise)! Rails App for Subdomains with Devise

Rails 3.2 example application shows how to use subdomains with Devise for authentication.

* "Devise":http://github.com/plataformatec/devise gives you ready-made authentication and user management.
* MongoDB is used as a datastore with the "Mongoid":http://mongoid.org/  gem for quick development without schemas or migrations.

Best of all, there's a "detailed tutorial":http://railsapps.github.com/tutorial-rails-subdomains.html to show how it's built.

You can build this application in only a few minutes using the "Rails Composer":http://railsapps.github.com/rails-composer/ tool.

h2. !http://twitter-badges.s3.amazonaws.com/t_logo-a.png(Follow on Twitter)!:http://www.twitter.com/rails_apps Follow on Twitter

Follow the project on Twitter: "@rails_apps":http://twitter.com/rails_apps. Please tweet some praise if you like what you've found.

h2. Tutorial

A complete walkthrough tutorial is available on the GitHub wiki:

h4. "View the Tutorial":http://railsapps.github.com/tutorial-rails-subdomains.html

The tutorial documents each step to follow to create the application. Every step is documented concisely, so a complete beginner can create this application without any additional knowledge. However, no explanation is offered for any of the steps, so if you are a beginner, youâ€™re advised to look for an introduction to Rails elsewhere. See a list of recommended resources for "Rails":http://railsapps.github.com/rails.html.

h2. What Is Implemented -- and What Is Not

The example app implements a common use of subdomains, often called "Basecamp-style subdomains in Rails." Visitors to the main site create a user account which is hosted at a subdomain that matches their user name. Each user has only one subdomain and when they log in, all their activity is confined to their subdomain.

Another common use of subdomains can be called "blog-style subdomains." This approach is familiar to users of sites such as wordpress.com where each user can create multiple blogs and each is hosted on its own subdomain. For example, a user with the email address "user@example.com@" can own more than one blog, for example, "puppyphotos.wordpress.com" and "kittenphotos.wordpress.com". The "blog-style subdomains" approach is not implemented in this example application.

h4. RailsApps Examples and Tutorials

This is one in a series of Rails example apps and tutorials from the "RailsApps Project":http://railsapps.github.com/. See a list of additional "Rails examples, tutorials, and starter apps":http://railsapps.github.com/rails-examples-tutorials.html.

h2. Dependencies

Before running this app, you will need:

* The Ruby language (version 1.9.3)
* Rails 3.2
* A working installation of "MongoDB":http://www.mongodb.org/ (version 1.6.0 or newer)

See the article "Installing Rails":http://railsapps.github.com/installing-rails.html for advice about updating Rails and your development environment.

h4. Installing MongoDB

If you don't have MongoDB installed on your computer, you'll need to install it and set it up to be always running on your computer (run at launch). On Mac OS X, the easiest way to install MongoDB is to install "Homebrew":http://mxcl.github.com/homebrew/ and then run the following:

<pre>
brew install mongodb
</pre>

Homebrew will provide post-installation instructions to get MongoDB running. The last line of the installation output shows you the MongoDB install location (for example, */usr/local/Cellar/mongodb/1.8.0-x86_64*). You'll find the MongoDB configuration file there. After an installation using Homebrew, the default data directory will be */usr/local/var/mongodb*.

h2. Getting the Application

You have several options for getting the code.

h3. Fork

If you'd like to add features (or bug fixes) to improve the example application, you can fork the GitHub repo and "make pull requests":http://help.github.com/send-pull-requests/. Your code contributions are welcome!

h3. Clone

If you want to copy and customize the app with changes that are only useful for your own project, you can clone the GitHub repo. You'll need to search-and-replace the project name throughout the application. You probably should generate the app instead (see below). To clone:

<pre>
$ git clone git://github.com/RailsApps/rails3-subdomains.git
</pre>

You'll need "git":http://git-scm.com/ on your machine. See "Rails and Git":http://railsapps.github.com/rails-git.html.

h3. Generate

If you want to use the project as a starter app, use the "Rails Composer":http://railsapps.github.com/rails-composer/ tool to generate a new version of the example app. You'll be able to give it your own project name when you generate the app. Generating the application gives you many additional options.

To build the example application, run the command:

<pre>
$ rails new myapp -m https://raw.github.com/RailsApps/rails-composer/master/composer.rb -T -O
</pre>

Use the @-T -O@ flags to skip Test::Unit files and Active Record files.

The @$@ character indicates a shell prompt; don't include it when you run the command.

This creates a new Rails app (with the name "myapp") on your computer.

h3. Edit the README

If you're storing the app in a GitHub repository, please edit the README files to add a description of the app and your contact info. If you don't change the README, people will think I am the author of your version of the application.

h2. Getting Started

h3. Install the Required Gems

Check the Gemfile to see which gems are used by this application.

If you used the "Rails Composer":http://railsapps.github.com/rails-composer/ tool to generate the example app, the application template script has already run the @bundle install@ command.

If not, you should run the @bundle install@ command to install the required gems on your computer:

<pre>
$ bundle install
</pre>

You can check which gems are installed on your computer with:

<pre>
$ gem list
</pre>

Keep in mind that you have installed these gems locally. When you deploy the app to another server, the same gems (and versions) must be available.

I recommend using "rvm":https://rvm.io/, the Ruby Version Manager, to create a project-specific gemset for the application. See the article "Installing Rails":http://railsapps.github.com/installing-rails.html.

h3. Configure Mongoid

Mongoid provides access to the MongoDB database from Rails.

You can use the default configuration found in the file *config/mongoid.yml*.

If you want to see what's in your MongoDB databases, I recommend using the "MongoHub":http://mongohub.todayclose.com/ app (for Mac OS X).

h3. Configure Email

You must configure the app for your email account if you want your application to send email messages.

h4. Use a Gmail account

You'll need to modify two files to include your Gmail username and password:

* *config/environments/development.rb*
* *config/environments/production.rb*

<pre>
config.action_mailer.smtp_settings = {
  address: "smtp.gmail.com",
  port: 587,
  domain: "example.com",
  authentication: "plain",
  enable_starttls_auto: true,
  user_name: ENV["GMAIL_USERNAME"],
  password: ENV["GMAIL_PASSWORD"]
}
</pre>

You can replace @ENV["GMAIL_USERNAME"]@ and @ENV["GMAIL_PASSWORD"]@ with your Gmail username and password. However, committing the file to a public GitHub repository will expose your secret password.

If you're familiar with setting "Unix environment variables":http://en.wikipedia.org/wiki/Environment_variable, it's advisable to leave @config.action_mailer.smtp_settings@ unchanged and set your environment variables in the file that is read when starting an interactive shell (the *~/.bashrc* file for the bash shell). This will keep the password out of your repository.

Are you using a bash shell? Use @echo $SHELL@ to find out. For a bash shell, edit the *~/.bashrc* file and add:

<pre>
export GMAIL_USERNAME="myname@gmail.com"
export GMAIL_PASSWORD="secret*"
</pre>

Open a new shell or restart your terminal application to continue.

h4. Configure ActionMailer

The example application is set to deliver email in production only. It will raise delivery errors in development but not production.

In development, @config.action_mailer.default_url_options@ is set for a host at @localhost:3000@ which will enable links in Devise confirmation email messages to work properly. You'll need to change the @config.action_mailer.default_url_options@ host option from @example.com@ to your own domain for the production environment.

You can change these values as needed in these two files:

* *config/environments/development.rb*
* *config/environments/production.rb*

h4. Configure Devise for Email

Complete your email configuration by modifying

* *config/initializers/devise.rb*

and setting the @config.mailer_sender@ option for the return email address for messages that Devise sends from the application.

h2. Configure Devise

You can modify the configuration file for Devise if you want to use something other than the defaults:

*config/initializers/devise.rb*

h2. Create a Default User

h4. Set Up a Database Seed File

You'll want to set up a default user so you can easily log in to test the app. You can modify the file *db/seeds.rb* for your own name, email and password:

<pre>
puts 'EMPTY THE MONGODB DATABASE'
Mongoid.master.collections.reject { |c| c.name =~ /^system/}.each(&:drop)
puts 'SETTING UP DEFAULT USER LOGIN'
user = User.create! :name => 'user1', :email => 'user@example.com', :password => 'please', :password_confirmation => 'please'
puts 'New user created: ' << user.name
user2 = User.create! :name => 'user2', :email => 'user2@example.com', :password => 'please', :password_confirmation => 'please'
puts 'New user created: ' << user2.name
</pre>

Use the defaults or change the values for name, email, and password as you wish.

h3. Set the Database

Prepare the database and add the default user to the database by running the commands:

<pre>
$ rake db:seed
</pre>

Set the database for running tests:

<pre>
$ rake db:test:prepare
</pre>

If youâ€™re not using "rvm":https://rvm.io/, the Ruby Version Manager, you should preface each rake command with @bundle exec@. You donâ€™t need to use @bundle exec@ if you are using rvm version 1.11.0 or newer.

h2. Test the Application With Subdomains

If you launch the application, it will be running at "http://localhost:3000/":http://localhost:3000/ or "http://0.0.0.0:3000/":http://0.0.0.0:3000/. However, unless you've made some configuration changes to your computer, you won't be able to resolve an address that uses a subdomain, such as "http://foo.localhost:3000/":http://foo.localhost:3000/. There are several complex solutions to this problem. You could set up your own domain name server on your localhost and create an A entry to catch all subdomains. You could modify your */etc/hosts* file (but it won't accommodate dynamically created subdomains). You can create a "proxy auto-config (PAC)":http://en.wikipedia.org/wiki/Proxy_auto-config file and set it up as the proxy in your web browser preferences.There's a far simpler solution that does not require reconfiguring your computer or web browser preferences. The developer Levi Cook registered a domain, "lvh.me":http://lvh.me:3000/ (short for: local virtual host me), that resolves to the localhost IP address 127.0.0.1 and supports wildcards (accommodating dynamically created subdomains).

To test the application, visit "http://lvh.me:3000/":http://lvh.me:3000/. You should see a list of registered users with links to their profile pages.

Try "http://user1.lvh.me:3000/":http://user1.lvh.me:3000/. You should see the profile page for the default user "user1."

Try "http://foo.lvh.me:3000/":http://foo.lvh.me:3000/. You should see the "user not found" error message.

Try "http://www.lvh.me:3000/":http://www.lvh.me:3000/. You should be redirected to the application home page at "http://lvh.me:3000/":http://lvh.me:3000/.

To sign in as the default user, (unless you've changed it) use

* email: user@example.com
* password: please

You should delete or change the pre-configured logins before you deploy your application.

h2. Deploy to Heroku

For your convenience, here are "instructions for deploying your app to Heroku":http://railsapps.github.com/rails-heroku-tutorial.html. Heroku provides low cost, easily configured Rails application hosting.

h2. Customizing

"Devise":http://github.com/plataformatec/devise provides a variety of features for implementing authentication. See the Devise documentation for options.

This example application and tutorial demonstrates Devise and Mongoid working together on Rails 3. Add any models, controllers, and views that you need.

h2. Testing

The application is set up for RSpec unit tests and Cucumber scenarios and steps. No tests and scenarios are implemented for this version of the example application. Please send the author a message, create an issue, or submit a pull request if you can contribute RSpec or Cucumber tests and scenarios.

After installing the application, run @rake -T@ to check that rake tasks for RSpec and Cucumber are available.

Run @rake spec@ to run all RSpec tests.

Run @rake cucumber@ (or more simply, @cucumber@) to run all Cucumber scenarios and steps.

h2. Troubleshooting

Problems? Check the "issues":https://github.com/RailsApps/rails3-subdomains/issues.

h4. Problems with  "Certificate Verify Failed"

Are you getting an error "OpenSSL certificate verify failed" when you try to generate a new Rails app from an application template? See suggestions to resolve the error "Certificate Verify Failed":http://railsapps.github.com/openssl-certificate-verify-failed.html.

h2. Documentation and Support

The "tutorial":http://railsapps.github.com/tutorial-rails-subdomains.html provides additional documentation.

For a Mongoid introduction, Ryan Bates offers a "Railscast on Mongoid":http://railscasts.com/episodes/238-mongoid. You can find documentation for "Mongoid":http://mongoid.org/ at "http://mongoid.org/":http://mongoid.org/ There is an active "Mongoid mailing list":http://groups.google.com/group/mongoid and you can submit "Mongoid issues":http://github.com/durran/mongoid/issues at GitHub.

For a Devise introduction, Ryan Bates offers a "Railscast on Devise":http://railscasts.com/episodes/209-introducing-devise. You can find documentation for "Devise":http://github.com/plataformatec/devise at "http://github.com/plataformatec/devise":http://github.com/plataformatec/devise. There is an active "Devise mailing list":http://groups.google.com/group/plataformatec-devise and you can submit "Devise issues":http://github.com/plataformatec/devise/issues at GitHub.

h4. Issues

Please create an "issue on GitHub":http://github.com/RailsApps/rails3-subdomains/issues if you identify any problems or have suggestions for improvements.

h4. Where to Get Help

Your best source for help with problems is "Stack Overflow":http://stackoverflow.com/questions/tagged/ruby-on-rails-3. Your issue may have been encountered and addressed by others.

You can also try "Rails Hotline":http://www.railshotline.com/, a free telephone hotline for Rails help staffed by volunteers.

h2. Contributing

If you make improvements to this application, please share with others.

Send the author a message, create an "issue":http://github.com/RailsApps/rails3-subdomains/issues, or fork the project and submit a pull request.

If you add functionality to this application, create an alternative implementation, or build an application that is similar, please contact me and I'll add a note to the README so that others can find your work.

h2. Credits

Thank you to "Brian Cardarella":http://bcardarella.com/ for a helpful blog post on "Custom Subdomains in Rails 3":http://bcardarella.com/post/716951242/custom-subdomains-in-rails-3.

Daniel Kehoe ("http://danielkehoe.com/":http://danielkehoe.com/) implemented the application and wrote the tutorial.

Is the app useful to you? Follow the project on Twitter: "@rails_apps":http://twitter.com/rails_apps
and tweet some praise. I'd love to know you were helped out by what I've put together.

h2. MIT License

"MIT License":http://www.opensource.org/licenses/mit-license

Copyright Â© 2012 Daniel Kehoe

!https://cruel-carlota.pagodabox.com/8f9093c277a7a135ad14ae2fb3df4d97(githalytics.com alpha)!
